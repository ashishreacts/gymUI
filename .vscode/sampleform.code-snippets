{
  "Sample Form Template": {
    "prefix": ["sampleform"],
    "body": [
      "import { yupResolver } from \"@hookform/resolvers/yup\";",
      "import { useForm } from \"react-hook-form\";",
      "import * as yup from \"yup\";",
      "",
      "// step 1: add type for form",
      "type FormValuesType = {",
      "  email: string;",
      "  password: string;",
      "};",
      "",
      "// stpe 2: write schema (validations) for FormType",
      "const schema: yup.ObjectSchema<FormValuesType> = yup.object().shape({",
      "  email: yup.string().email(\"invalid email\").required(\"email is required\"),",
      "  password: yup",
      "    .string()",
      "    .required(\"Password is required\")",
      "    .min(6, \"Password should have at least 6 characters\"),",
      "});",
      "",
      "// step 3: create fn useFormWithValidation",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "const useFormWithValidation = () => {",
      "  const form = useForm<FormValuesType>({",
      "    defaultValues: {",
      "      email: \"\",",
      "      password: \"\",",
      "    },",
      "    resolver: yupResolver(schema),",
      "  });",
      "",
      "  return form;",
      "};",
      "",
      "// step 4: define the form component",
      "// const Form = () => {...}",
      "const Form = () => {",
      "  return <div>sample</div>;",
      "};",
      "",
      "// step 5: add component prop type.",
      "// These Props are passed from routes or other calling components",
      "type Props = {",
      "  onSuccess: () => void;",
      "};",
      "",
      "// step 6: Component to be exported.",
      "// Keep the code in this component short - it should serve as top level for smaller components",
      "// export const Sample: React.FC<Props> = ({destructure props here}) => {...}",
      "export const Sample: React.FC<Props> = () => {",
      "  return <Form />;",
      "};"
    ],
    "description": "Inserts a sample form component with validation"
  }
}
